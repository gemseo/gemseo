# Created from https://github.com/docker-library/python.git
# 0. Be on linux
# 1. Filter out unwanted stuff from versions.json
# 2. Run apply-templates.sh
# 3. Gather the Dockerfile of interest here.
# 4. Be on windows
# 5. Build the image

FROM mcr.microsoft.com/windows/servercore:ltsc2019

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# https://github.com/docker-library/python/pull/557
ENV PYTHONIOENCODING UTF-8

ENV PYTHON_VERSION 3.9.13

RUN $url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f ($env:PYTHON_VERSION -replace '[a-z]+[0-9]*$', ''), $env:PYTHON_VERSION); \
    Write-Host ('Downloading {0} ...' -f $url); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri $url -OutFile '_python.exe'; \
    \
    Write-Host 'Installing ...'; \
# https://docs.python.org/3/using/windows.html#installing-without-ui
    $exitCode = (Start-Process _python.exe -Wait -NoNewWindow -PassThru \
        -ArgumentList @( \
            '/quiet', \
            'InstallAllUsers=1', \
            'TargetDir=C:\Python3.9', \
            'PrependPath=1', \
            'Shortcuts=0', \
            'Include_doc=0', \
            'Include_pip=1', \
            'Include_test=0' \
        ) \
    ).ExitCode; \
    if ($exitCode -ne 0) { \
        Write-Host ('Running python installer failed with exit code: {0}' -f $exitCode); \
        Get-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \
        exit $exitCode; \
    } \
    \
# the installer updated PATH, so we should refresh our local value
    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Verifying install ...'; \
    Write-Host '  python --version'; python --version; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item _python.exe -Force; \
    Remove-Item $env:TEMP/Python*.log -Force; \
    \
    $env:PYTHONDONTWRITEBYTECODE = '1'; \
    \
    Write-Host ('Installing setuptools and wheel ...'); \
    pip install \
        --disable-pip-version-check \
        --no-cache-dir \
        --no-compile \
        'setuptools==58.1.0' \
        wheel \
    ; \
    \
    Write-Host 'Verifying pip install ...'; \
    pip --version; \
    \
    Write-Host 'Complete.'

ENV PYTHON_VERSION 3.10.11

RUN $url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f ($env:PYTHON_VERSION -replace '[a-z]+[0-9]*$', ''), $env:PYTHON_VERSION); \
    Write-Host ('Downloading {0} ...' -f $url); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri $url -OutFile '_python.exe'; \
    \
    Write-Host 'Installing ...'; \
# https://docs.python.org/3/using/windows.html#installing-without-ui
    $exitCode = (Start-Process _python.exe -Wait -NoNewWindow -PassThru \
        -ArgumentList @( \
            '/quiet', \
            'InstallAllUsers=1', \
            'TargetDir=C:\Python3.10', \
            'PrependPath=1', \
            'Shortcuts=0', \
            'Include_doc=0', \
            'Include_pip=1', \
            'Include_test=0' \
        ) \
    ).ExitCode; \
    if ($exitCode -ne 0) { \
        Write-Host ('Running python installer failed with exit code: {0}' -f $exitCode); \
        Get-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \
        exit $exitCode; \
    } \
    \
# the installer updated PATH, so we should refresh our local value
    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Verifying install ...'; \
    Write-Host '  python --version'; python --version; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item _python.exe -Force; \
    Remove-Item $env:TEMP/Python*.log -Force; \
    \
    $env:PYTHONDONTWRITEBYTECODE = '1'; \
    \
    Write-Host ('Installing setuptools and wheel ...'); \
    pip install \
        --disable-pip-version-check \
        --no-cache-dir \
        --no-compile \
        'setuptools==65.5.1' \
        wheel \
    ; \
    \
    Write-Host 'Verifying pip install ...'; \
    pip --version; \
    \
    Write-Host 'Complete.'

ENV PYTHON_VERSION 3.11.9

RUN $url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f ($env:PYTHON_VERSION -replace '[a-z]+[0-9]*$', ''), $env:PYTHON_VERSION); \
    Write-Host ('Downloading {0} ...' -f $url); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri $url -OutFile '_python.exe'; \
    \
    Write-Host 'Installing ...'; \
# https://docs.python.org/3/using/windows.html#installing-without-ui
    $exitCode = (Start-Process _python.exe -Wait -NoNewWindow -PassThru \
        -ArgumentList @( \
            '/quiet', \
            'InstallAllUsers=1', \
            'TargetDir=C:\Python3.11', \
            'PrependPath=1', \
            'Shortcuts=0', \
            'Include_doc=0', \
            'Include_pip=1', \
            'Include_test=0' \
        ) \
    ).ExitCode; \
    if ($exitCode -ne 0) { \
        Write-Host ('Running python installer failed with exit code: {0}' -f $exitCode); \
        Get-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \
        exit $exitCode; \
    } \
    \
# the installer updated PATH, so we should refresh our local value
    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Verifying install ...'; \
    Write-Host '  python --version'; python --version; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item _python.exe -Force; \
    Remove-Item $env:TEMP/Python*.log -Force; \
    \
    $env:PYTHONDONTWRITEBYTECODE = '1'; \
    \
    Write-Host ('Installing setuptools and wheel ...'); \
    pip install \
        --disable-pip-version-check \
        --no-cache-dir \
        --no-compile \
        'setuptools==65.5.1' \
        wheel \
    ; \
    \
    Write-Host 'Verifying pip install ...'; \
    pip --version; \
    \
    Write-Host 'Complete.'

ENV PYTHON_VERSION 3.12.8
ENV PYTHON_SHA256 71bd44e6b0e91c17558963557e4cdb80b483de9b0a0a9717f06cf896f95ab598

RUN $url = ('https://www.python.org/ftp/python/{0}/python-{1}-amd64.exe' -f ($env:PYTHON_VERSION -replace '[a-z]+[0-9]*$', ''), $env:PYTHON_VERSION); \
    Write-Host ('Downloading {0} ...' -f $url); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri $url -OutFile '_python.exe'; \
    \
    Write-Host ('Verifying sha256 ({0}) ...' -f $env:PYTHON_SHA256); \
    if ((Get-FileHash _python.exe -Algorithm sha256).Hash -ne $env:PYTHON_SHA256) { \
        Write-Host 'FAILED!'; \
        exit 1; \
    }; \
    \
    Write-Host 'Installing ...'; \
# https://docs.python.org/3/using/windows.html#installing-without-ui
    $exitCode = (Start-Process _python.exe -Wait -NoNewWindow -PassThru \
        -ArgumentList @( \
            '/quiet', \
            'InstallAllUsers=1', \
            'TargetDir=C:\Python3.12', \
            'PrependPath=1', \
            'Shortcuts=0', \
            'Include_doc=0', \
            'Include_pip=1', \
            'Include_test=0' \
        ) \
    ).ExitCode; \
    if ($exitCode -ne 0) { \
        Write-Host ('Running python installer failed with exit code: {0}' -f $exitCode); \
        Get-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \
        exit $exitCode; \
    } \
    \
# the installer updated PATH, so we should refresh our local value
    $env:PATH = [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Verifying install ...'; \
    Write-Host '  python --version'; python --version; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item _python.exe -Force; \
    Remove-Item $env:TEMP/Python*.log -Force; \
    \
    $env:PYTHONDONTWRITEBYTECODE = '1'; \
    \
    Write-Host 'Verifying pip install ...'; \
    pip --version; \
    \
    Write-Host 'Complete.'

RUN $url = ('https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/12.2.1/windows_10_cmake_Release_graphviz-install-12.2.1-win64.exe'); \
		Write-Host ('Downloading {0} ...' -f $url); \
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
		Invoke-WebRequest -Uri $url -OutFile 'graphviz.exe'; \
		\
		Write-Host 'Installing ...'; \
		$exitCode = (Start-Process graphviz.exe -Wait -NoNewWindow -PassThru \
			-ArgumentList @( \
				'/S', \
				'/D=C:\Graphviz' \
			) \
		).ExitCode; \
		if ($exitCode -ne 0) { \
			Write-Host ('Running graphviz installer failed with exit code: {0}' -f $exitCode); \
			Get-ChildItem $env:TEMP | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1 | Get-Content; \
			exit $exitCode; \
		} \
		\
    setx /M PATH $(${Env:PATH} + \";C:\Graphviz\bin\")

# Have versioned python executables discoverable by tox.
RUN Copy-Item -Path "c:\Python3.9\python.exe"  -Destination "c:\Python3.9\python3.9.exe" ;\
    Copy-Item -Path "c:\Python3.10\python.exe" -Destination "c:\Python3.10\python3.10.exe" ;\
    Copy-Item -Path "c:\Python3.11\python.exe" -Destination "c:\Python3.11\python3.11.exe" ;\
    Copy-Item -Path "c:\Python3.12\python.exe" -Destination "c:\Python3.12\python3.12.exe" ;

RUN python3.12 -m pip install 'tox<5' tox-uv codecov --no-cache-dir --break-system-packages

# Standard C++ library needed for some python extensions.
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
		Invoke-WebRequest "https://aka.ms/vs/17/release/vc_redist.x64.exe" -OutFile "vc_redist.x64.exe"; \
		Start-Process -filepath C:\vc_redist.x64.exe -ArgumentList "/install", "/passive", "/norestart" -Passthru | Wait-Process; \
		Remove-Item -Force vc_redist.x64.exe;

# Install MSYS2 to provide bash.
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -UseBasicParsing -uri "https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe" -OutFile msys2.exe; \
    .\msys2.exe -y -oC:\; \
    Remove-Item msys2.exe ; \
    function msys() { C:\msys64\usr\bin\bash.exe @('-lc') + @Args; } \
    msys ' '; \
    msys 'pacman --noconfirm -Syuu'; \
    msys 'pacman --noconfirm -Syuu'; \
    msys 'pacman --noconfirm -Scc';

# Needed for exposing bash in the ENTRYPOINT.
RUN setx /M PATH $(${Env:PATH} + \";C:\msys64\usr\bin\")

# Expose windows PATH environment variable to bash.
ENV MSYS2_PATH_TYPE 'inherit'

ENTRYPOINT [ "bash.exe", "-l" ]
