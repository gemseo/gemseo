{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "differentiated_input_names_substitute": {
      "type": "array",
      "description": "The names of the discipline inputs with respect to which to differentiate the discipline outputs used as objective, constraints and observables. If empty, consider the inputs of these functions. More precisely, for each function, an :class:`.MDOFunction` is built from the ``disciplines``, which depend on input variables :math:`x_1,\\ldots,x_d,x_{d+1}`, and over an input space spanned by the input variables :math:`x_1,\\ldots,x_d` and depending on both the MDO formulation and the ``design_space``. Then, the methods :meth:`.MDOFunction.evaluate` and :meth:`.MDOFunction.jac` are called at a given point of the input space and return the output value and the Jacobian matrix, i.e. the matrix concatenating the partial derivatives with respect to the inputs :math:`x_1,\\ldots,x_d` at this point of the input space. This argument can be used to compute the matrix concatenating the partial derivatives at the same point of the input space but with respect to custom inputs, e.g. :math:`x_{d-1}` and :math:`x_{d+1}`. Mathematically speaking, this matrix returned by :meth:`.MDOFunction.jac` is no longer a Jacobian."
    },
    "include_weak_coupling_targets": {
      "type": "boolean",
      "description": "If ``True``, all disciplines are executed in parallel, and all couplings (weak and strong) are set as target variables in the design space. This maximizes the exploitation of the parallelism but leads to a larger design space, so usually more iterations by the optimizer. Otherwise, the coupling graph is analyzed and the disciplines are chained in sequence and in parallel to solve all weak couplings. In this case, only the strong couplings are used as target variables in the design space. This reduces the size of the optimization problem, so usually leads to less iterations. The best option depends on the number of strong vs weak couplings, the availability of gradients, the availability of CPUs versus the number of disciplines, so it is very context dependant. Otherwise, IDF will consider only the strong coupling targets."
    },
    "mda_chain_settings_for_start_at_equilibrium": {
      "type": "object",
      "description": "The settings for the MDA when ``start_at_equilibrium=True``.  See detailed settings in :class:`.MDAChain`."
    },
    "n_processes": {
      "type": "integer",
      "description": "The maximum simultaneous number of threads if ``use_threading`` is ``True``, or processes otherwise, used to parallelize the execution."
    },
    "normalize_constraints": {
      "type": "boolean",
      "description": "Whether the outputs of the coupling consistency constraints are scaled."
    },
    "start_at_equilibrium": {
      "type": "boolean",
      "description": "Whether an MDA is used to initialize the coupling variables."
    },
    "use_threading": {
      "type": "boolean",
      "description": "Whether to use threads instead of processes to parallelize the execution when ``include_weak_coupling_targets`` is ``True``; multiprocessing will copy (serialize) all the disciplines, while threading will share all the memory. This is important to note if you want to execute the same discipline multiple times, you shall use multiprocessing."
    }
  }
}
