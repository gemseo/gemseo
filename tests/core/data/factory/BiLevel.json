{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "differentiated_input_names_substitute": {
      "description": "The names of the discipline inputs against which to differentiate the discipline outputs used as objective, constraints and observables. If empty, consider the inputs of these functions. More precisely, for each function, an :class:`.MDOFunction` is built from the ``disciplines``, which depend on input variables :math:`x_1,\\ldots,x_d,x_{d+1}`, and over an input space spanned by the input variables :math:`x_1,\\ldots,x_d` and depending on both the MDO formulation and the ``design_space``. Then, the methods :meth:`.MDOFunction.evaluate` and :meth:`.MDOFunction.jac` are called at a given point of the input space and return the output value and the Jacobian matrix, i.e. the matrix concatenating the partial derivatives with respect to the inputs :math:`x_1,\\ldots,x_d` at this point of the input space. This argument can be used to compute the matrix concatenating the partial derivatives at the same point of the input space but with respect to custom inputs, e.g. :math:`x_{d-1}` and :math:`x_{d+1}`. Mathematically speaking, this matrix returned by :meth:`.MDOFunction.jac` is no longer a Jacobian.",
      "type": "array"
    },
    "main_mda_name": {
      "description": "The name of the class of the main MDA. Typically the :class:`.MDAChain`, but one can force to use :class:`.MDAGaussSeidel` for instance.",
      "type": "string"
    },
    "main_mda_settings": {
      "description": "The settings of the main MDA. These settings may include those of the inner-MDA.",
      "type": "object"
    },
    "parallel_scenarios": {
      "description": "Whether to run the sub-scenarios in parallel.",
      "type": "boolean"
    },
    "multithread_scenarios": {
      "description": "If ``True`` and parallel_scenarios=True, the sub-scenarios are run in parallel using multi-threading; if False and parallel_scenarios=True, multiprocessing is used.",
      "type": "boolean"
    },
    "apply_cstr_tosub_scenarios": {
      "description": "Whether the :meth:`.add_constraint` method adds the constraint to the optimization problem of the sub-scenario capable of computing the constraint.",
      "type": "boolean"
    },
    "apply_cstr_to_system": {
      "description": "Whether the :meth:`.add_constraint` method adds the constraint to the optimization problem of the system scenario.",
      "type": "boolean"
    },
    "reset_x0_before_opt": {
      "description": "Whether to restart the sub optimizations from the initial guesses, otherwise warm start them.",
      "type": "boolean"
    },
    "sub_scenarios_log_level": {
      "description": "The level of the root logger during the sub-scenarios executions. If ``None``, do not change the level of the root logger.",
      "type": "null"
    }
  }
}
