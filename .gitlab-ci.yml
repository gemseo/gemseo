image: continuumio/miniconda3:4.9.2

# Settings common to all the jobs.
variables:
  # Set this variable to true to run all the tox tests envs,
  # this format allows pre-filling in gitlab run pipeline UI.
  ALL_TEST_ENVS:
    value: "false"
    description: "Set to true to run all the tox tests environments."

# Stages executed sequentially until a job fails.
stages:
  - check
  - tests

# Commands executed before the job main script, it creates the env with tox, used for all the jobs.
before_script:
  - conda create -p .tox-env pip
  # Install tox-conda (will also install tox).
  - conda run -p .tox-env --no-capture-output pip install tox-conda==0.7.3
  # Show debug info on the anaconda settings.
  - conda info --all

# Not common settings below.

# Jobs are defined as a hierarchy from the most common settings to the specific ones.
# TODO: make the hierarchy more readable
# .base
# .linux
# .windows
# .additional-tests
#     style
#     pylint
#     .tests
#         .tests-linux
#             py27,py38
#             py36,py37
#         .tests-windows
#             py27-win,py38-win
#             py36-win,py37-win

# Base job template.
.base:
  script:
    # Run a tox env named after a job name.
    - conda run
      -p .tox-env
      --no-capture-output
      tox -e $CI_JOB_NAME
  cache:
    paths:
      # This env is the same for all the jobs but the cache is duplicated for all of them.
      # TODO: use multi-cache when it is available on gitlab.com
      - .tox-env
      # The env of the current job.
      - .tox/$CI_JOB_NAME
      # The pre-commit cache, non-empty only for the style job, defined here because it is not easy to extend a list
      # from a parent list.
      - .cache/pre-commit

# Specific settings for linux jobs.
.linux:
  tags:
    - docker
  variables:
    # Caches on the CI runner host.
    CONDA_PKGS_DIRS: "/opt/gitlab-runner-cache/conda"
    PIP_CACHE_DIR: "/opt/gitlab-runner-cache/pip"

# Specific settings for windows jobs.
.windows:
  tags:
    - windows-server-2012
  variables:
    # Caches on the CI runner host.
    CONDA_PKGS_DIRS: "C:\\gitlab-runner-cache\\conda"
    PIP_CACHE_DIR: "C:\\gitlab-runner-cache\\pip"

# Jobs for the check stage.
style:
  extends:
    - .base
    - .linux
  stage: check
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
    # Pass the cache locations through the tox env.
    TOX_TESTENV_PASSENV: PIP_CACHE_DIR PRE_COMMIT_HOME
  cache:
    key:
      files:
        - .pre-commit-config.yaml
        - requirements/style.txt

pylint:
  extends:
    - .base
    - .linux
  stage: check
  allow_failure: true
  cache:
    key:
      files:
        - requirements/pylint.txt
  # always create the cache
    when: always

# Tests stage.

# Base tests job, common to all the tests jobs.
.tests:
  extends: .base
  stage: tests
  variables:
    # Use coverage and generate reports,
    # via env variables because passing extra command line options to tox within the current file is cumbersome.
    PYTEST_ADDOPTS: --cov --cov-report=term --cov-report=xml --junitxml=report.xml
    TOX_TESTENV_PASSENV: PYTEST_ADDOPTS
  cache:
    key:
      # Define the cache affinity such that it is tied to the content of the tests env.
      files:
        # The packages installed in an env are loosely defined in those requirements files
        #   (not strictly because these files only define the unpinned direct dependencies).
        - requirements/gemseo.in
        - requirements/gemseo-conda.txt
      # Some packages will change when the python version changes, hence the tox env name.
      prefix: $CI_JOB_NAME
  artifacts:
    # Send the artifacts even on job failure.
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

# Common settings for windows tests jobs.
.tests-windows:
  extends:
    - .tests
    - .windows
  after_script:
    # Workaround coverage files path issues, see https://gitlab.com/gitlab-org/gitlab/-/issues/217664
    - (Get-Content coverage.xml) -replace 'filename=".*/site-packages', 'filename="src' |  Out-File "coverage.xml"

# Common settings for linux (linux) jobs.
.tests-linux:
  extends:
    - .tests
    - .linux
  after_script:
    # Workaround coverage files path issues, see https://gitlab.com/gitlab-org/gitlab/-/issues/217664
    - sed "s|filename=\".*/site-packages|filename=\"src|" -i coverage.xml

# Jobs for the tests stage.
py27:
  extends: .tests-linux

py38:
  extends: .tests-linux

py27-win:
  extends: .tests-windows

py38-win:
  extends: .tests-windows

# Define jobs for minor env with this additional parent
.additional-tests:
  rules:
    # For selecting from gitlab UI
    - if: '$ALL_TEST_ENVS == "true"'
    # Run for MR to the master branch
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'

py36:
  extends:
    - .tests-linux
    - .additional-tests

py37:
  extends:
    - .tests-linux
    - .additional-tests

py36-win:
  extends:
    - .tests-windows
    - .additional-tests

py37-win:
  extends:
    - .tests-windows
    - .additional-tests
