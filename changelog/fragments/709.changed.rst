API changes:
- ``DesignSpace`` and ``ParameterSpace`` no longer provide a dictionary-like interface to manipulate its items with square brackets [].
- The ``DesignSpace.add_variables_from`` method can be used to add variables from existing variable spaces.
- The class ``DesignSpace.DesignVariable`` no longer exists.
- A variable of a ``DesignSpace`` can no longer have one type (float or integer) per component, but rather a single type, shared by all its components.
    - ``DesignSpace.add_variable`` no longer accepts a sequence of variable types for its ``var_type`` argument.
    - The values of dictionary ``DesignSpace.variable_types`` are no longer NumPy arrays of strings, but simple strings.
- The components of a (lower or upper) bound of a ``DesignSpace`` variable can no longer be ``None``. Unboundedness shall be encoded with ``-numpy.inf`` for lower bounds, and ``numpy.inf`` for upper bounds.
    - ``DesignSpace.add_variable`` no longer accepts ``None`` for its arguments ``l_b`` and ``u_b``. These two arguments now default to ``-numpy.inf`` and ``numpy.inf`` respectively.
    - ``DesignSpace.set_lower_bound`` and ``DesignSpace.set_upper_bound`` no longer accept ``None`` arguments, but rather infinities.
    - The return values of ``DesignSpace.get_lower_bound`` and ``DesignSpace.get_upper_bound`` can no longer be ``None``, but rather NumPy arrays of infinite values.
- Arguments ``var_type``, ``l_b`` and ``u_b`` are respectively renamed ``type_``, ``lower_bound`` and ``upper_bound``.
- The method ``array_to_dict`` is renamed ``convert_array_to_dict``.
- The method ``dict_to_array`` is renamed ``convert_dict_to_array``.
- The method ``has_current_value`` is now a property.
- The method ``has_integer_variables`` is now a property.
