..
   Copyright 2021 IRT Saint-Exup√©ry, https://www.irt-saintexupery.com

   This work is licensed under the Creative Commons Attribution-ShareAlike 4.0
   International License. To view a copy of this license, visit
   http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative
   Commons, PO Box 1866, Mountain View, CA 94042, USA.

.. _gen_opt_algos:

Optimization algorithms options
===============================

A simple way to solve an :class:`.OptimizationProblem` is to use the API method
:meth:`~gemseo.api.execute_algo` with any choice of optimization algorithm.
E.g.

.. code::

    from gemseo.api import execute_algo
    from gemseo.problems.analytical.rosenbrock import Rosenbrock

    problem = Rosenbrock()
    sol = execute_algo(problem, "L-BFGS-B", max_iter=20)

In addition to these arguments, many options can be prescribed depending on the choice
of the algorithm. The list of all the optional arguments are given below.

An other way to execute an optimization algorithm is through an :class:`.MDOScenario`,
calling the :code:`execute()` function.
In such case, any optional parameters can be prescribed through the argument :code:`algo_options`
with a dictionary.
E.g.

.. code::

    from gemseo.api import create_discipline, read_design_space, \
        create_scenario, configure_logger

    discipline = create_discipline("SobieskiMission")

    design_space = read_design_space("sobieski_design_space.txt")

    scenario = create_scenario(discipline, "DisciplinaryOpt", "y_4", design_space, scenario_type="MDO")
    scenario.execute({"algo": "SLSQP", "max_iter": 2, "algo_options": {...}})


List of available algorithms:
{% for algo in opt_algos%}:ref:`{{algo}}_options` -
{% endfor %}

{% for algo in opt_algos%}
.. _{{algo}}_options:

{{algo}}
{{ (algo|length)*'-' }}

Description
~~~~~~~~~~~

{{opt_descriptions[algo]}}

{% if opt_url[algo] is not none %}
{% set temp = '`External link <' + opt_url[algo] + '>`__' %}
{{temp}}
{{ (temp|length)*'~' }}
{%endif %}

Options
~~~~~~~

{% for option in opt_options[algo]|dictsort %}
- **{{option[0]}}**, :code:`{{option[1]['ptype']}}` - {{option[1]['description']}}

{% endfor %}
{% endfor %}
