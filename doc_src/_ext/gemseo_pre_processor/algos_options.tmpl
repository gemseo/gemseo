..
   Copyright 2021 IRT Saint-Exup√©ry, https://www.irt-saintexupery.com

   This work is licensed under the Creative Commons Attribution-ShareAlike 4.0
   International License. To view a copy of this license, visit
   http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative
   Commons, PO Box 1866, Mountain View, CA 94042, USA.

.. _gen_{{algo_type}}_algos:

{{long_algo_type}}
{{ (long_algo_type|length)*'=' }}

.. warning::
   Some capabilities may require the :ref:`installation <installation>` of |g| with :ref:`all its features <dependencies>`
   and some others may depend on :ref:`plugins <plugins>`.

.. warning::
   All the features of the wrapped libraries may not be exposed through |g|.

{% if use_pydantic_model %}
.. note::
   The algorithm settings can be passed to a function of the form

   .. code-block:: python

      function(..., settings_model: AlgorithmSettings | None = None, **settings: Any)

   either one by one:

   .. code-block:: python

      function(..., setting_name_1=setting_name_1, setting_name_2=setting_name_2, ...)

   or using the argument name ``"settings_model"`` and the Pydantic model associated with the algorithm:

   .. code-block:: python

      settings_model = AlgorithmSettings(setting_name_1=setting_name_1, setting_name_2=setting_name_2, ...)
      function(..., settings_model=settings_model)

{% endif %}

{% if user_guide_anchor %}
.. seealso::
   You can find more information about this family of algorithms in :ref:`the user guide <{{user_guide_anchor}}>`.
{% endif %}

{% if features is not none %}
.. raw:: html

    <h2>Overview</h2>
    <style>
    th {
      cursor: pointer;
    }

    tr:hover {
      border: 1pt solid var(--pst-color-secondary);
    }

    th, td {
      text-align: center;
    }

    .hidden-row {
        display: none;
    }
    </style>
    Display in the table the optimization algorithms that
    <ul>
    <li><label>support equality constraints <input type="checkbox" id="handleEqualityConstraintsCheckbox"></label></li>
    <li><label>support inequality constraints <input type="checkbox" id="handleInequalityConstraintsCheckbox"></label></li>
    <li><label>support float variables <input type="checkbox" id="handleFloatVariablesCheckbox" checked></label></li>
    <li><label>support integer variables <input type="checkbox" id="handleIntegerVariablesCheckbox"></label></li>
    <li><label>support multiple objective <input type="checkbox" id="handleMultiObjectiveCheckbox"></label></li>
    <li><label>require gradient evaluations <input type="checkbox" id="requireGradientCheckbox"></label></li>
    </ul>
    <table id="myTable">
        <thead>
            <tr>
                <th onclick="sortTable(0)">Algorithm<br/>&#x25B2;&#x25BC;</th>
                <th onclick="sortTable(1)">Library<br/>&#x25B2;&#x25BC;</th>
                <th onclick="sortTable(2)">Name in GEMSEO<br/>&#x25B2;&#x25BC;</th>
                <th onclick="sortTable(3)">Package<br/>&#x25B2;&#x25BC;</th>
            </tr>
        </thead>
        <tbody>
{% for algo in algos %}
{% set algo_features = features[algo] %}
        <tr class="{% if algo_features.handle_equality_constraints %}handleEqualityConstraints {% endif %}{% if algo_features.handle_inequality_constraints %}handleInequalityConstraints {% endif %}{% if algo_features.handle_float_variables %}handleFloatVariables {% endif %}{% if algo_features.handle_integer_variables %}handleIntegerVariables {% endif %}{% if algo_features.handle_multiobjective %}handleMultiObjective {% endif %}{% if algo_features.require_gradient %}requireGradient{% endif %}">
            <td>{{algo_features.algorithm_name}}</td>
            <td>{{algo_features.library_name}}</td>
            <td><a href="#{{ algo|lower|replace('_', '-') }}">{{algo}}</a></td>
            <td><a href="https://gitlab.com/gemseo/dev/{{ algo_features.root_package_name.replace('_', '-') }}">{{algo_features.root_package_name}}</a></td>
        </tr>
{% endfor %}
        </tbody>
    </table>
    <br/>
    <script>
        function sortTable(n) {
          var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
          table = document.getElementById("myTable");
          switching = true;
          dir = "asc";
          while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
              shouldSwitch = false;
              x = rows[i].getElementsByTagName("TD")[n];
              y = rows[i + 1].getElementsByTagName("TD")[n];
              if (dir == "asc") {
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                  shouldSwitch= true;
                  break;
                }
              } else if (dir == "desc") {
                if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                  shouldSwitch = true;
                  break;
                }
              }
            }
            if (shouldSwitch) {
              rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
              switching = true;
              switchcount ++;
            } else {
              if (switchcount == 0 && dir == "asc") {
                dir = "desc";
                switching = true;
              }
            }
          }
        }

        const handleEqualityConstraintsCheckbox = document.getElementById('handleEqualityConstraintsCheckbox');
        const handleInequalityConstraintsCheckbox = document.getElementById('handleInequalityConstraintsCheckbox');
        const handleFloatVariablesCheckbox = document.getElementById('handleFloatVariablesCheckbox');
        const handleIntegerVariablesCheckbox = document.getElementById('handleIntegerVariablesCheckbox');
        const handleMultiObjectiveCheckbox = document.getElementById('handleMultiObjectiveCheckbox');
        const requireGradientCheckbox = document.getElementById('requireGradientCheckbox');
        const rows = document.querySelectorAll('tbody tr');

        function filterRows() {
            rows.forEach(row => {
                const hasClasshandleEqualityConstraints = row.classList.contains('handleEqualityConstraints');
                const hasClasshandleInequalityConstraints = row.classList.contains('handleInequalityConstraints');
                const hasClasshandleFloatVariables = row.classList.contains('handleFloatVariables');
                const hasClasshandleIntegerVariables = row.classList.contains('handleIntegerVariables');
                const hasClasshandleMultiObjective = row.classList.contains('handleMultiObjective');
                const hasClassrequireGradient = row.classList.contains('requireGradient');

                if (
                       (!handleEqualityConstraintsCheckbox.checked && !handleInequalityConstraintsCheckbox.checked && !handleFloatVariablesCheckbox.checked && !handleIntegerVariablesCheckbox.checked && !handleMultiObjectiveCheckbox.checked && !requireGradientCheckbox.checked)
                       || (handleEqualityConstraintsCheckbox.checked && !hasClasshandleEqualityConstraints)
                       || (handleInequalityConstraintsCheckbox.checked && !hasClasshandleInequalityConstraints)
                       || (handleFloatVariablesCheckbox.checked && !hasClasshandleFloatVariables)
                       || (handleIntegerVariablesCheckbox.checked && !hasClasshandleIntegerVariables)
                       || (handleMultiObjectiveCheckbox.checked && !hasClasshandleMultiObjective)
                       || (requireGradientCheckbox.checked && !hasClassrequireGradient)
                )
                {
                    row.classList.add('hidden-row');
                } else {
                    row.classList.remove('hidden-row');
                }
            });
        }
        handleEqualityConstraintsCheckbox.addEventListener('change', filterRows);
        handleInequalityConstraintsCheckbox.addEventListener('change', filterRows);
        handleFloatVariablesCheckbox.addEventListener('change', filterRows);
        handleIntegerVariablesCheckbox.addEventListener('change', filterRows);
        handleMultiObjectiveCheckbox.addEventListener('change', filterRows);
        requireGradientCheckbox.addEventListener('change', filterRows);
        filterRows();
    </script>
{% endif %}

{% for algo in algos %}
.. _{{algo}}_options:

{{algo}}
{{ (algo|length)*'-' }}

{% if libraries[algo] != "gemseo" %}
.. note::
    The plugin `{{ libraries[algo] }} <https://gitlab.com/gemseo/dev/{{ libraries[algo].replace('_', '-') }}>`_ is required.
{% endif %}

Module: :class:`{{modules[algo]}}`

{% if descriptions[algo] %}
{{descriptions[algo]}}
{% endif %}

{% if pydantic_model_imports[algo] %}
.. code-block:: python
   :caption: Pydantic model of the settings for {{algo}}

   {{pydantic_model_imports[algo]}}

{% endif %}

{% if websites[algo] %}
More details about the algorithm and its settings on {{websites[algo]}}.
{% endif %}

{% set optional_parameters = [] %}
{% for parameter in options[algo]|dictsort %}
{% if 'default' in parameter[1] or parameter[0].startswith('**') %}
{% set tmp = optional_parameters.append(parameter) %}
{% endif %}
{% endfor %}

{% if optional_parameters and optional_parameters[0][0].startswith("**") %}
{% set tmp = optional_parameters.append(optional_parameters[0]) %}
{% set tmp = optional_parameters.pop(0) %}
{% endif %}

{% set required_parameters = [] %}
{% for parameter in options[algo]|dictsort %}
{% if 'default' not in parameter[1] and not parameter[0].startswith('**') %}
{% set tmp = required_parameters.append(parameter) %}
{% endif %}
{% endfor %}

{% if required_parameters and required_parameters[0][0].startswith("*") %}
{% set tmp = required_parameters.append(required_parameters[0]) %}
{% set tmp = required_parameters.pop(0) %}
{% endif %}

{% if required_parameters %}
.. raw:: html

    <dl class="field-list simple">
    <dt class="field-odd">Required settings</dt>
    <dd class="field-odd"><ul class="simple">
{% for arg in required_parameters %}
    <li>

**{{arg[0]}}** : *{{arg[1]['ptype']}}{% if 'default' in arg[1] %}, optional{% endif %}*

{{arg[1]['description']}}

.. raw:: html

    </li>
{% endfor %}
    </ul>
    </dd>
    </dl>
{% endif %}

{% if optional_parameters %}
.. raw:: html

    <dl class="field-list simple">
    <dt class="field-odd">Optional settings</dt>
    <dd class="field-odd"><ul class="simple">

{% for arg in optional_parameters %}
    <li>

**{{arg[0]}}** : *{{arg[1]['ptype']}}{% if arg[1]['default'] != '' %}, optional{% endif %}*

{{arg[1]['description']}}

{% if not arg[0].startswith('*') %}
By default it is set to {{arg[1]['default']}}.
{% endif %}

.. raw:: html

    </li>
{% endfor %}
    </ul>
    </dd>
    </dl>
{% endif %}

{% endfor %}
