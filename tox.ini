# tox (https://tox.readthedocs.io/) is a tool for running tests in multiple environments.

[tox]
# this version support empty factors we use for {,-win}
minversion = 3.20.0
requires = tox-conda >=0.7.3
envlist =
    py{27,38}{,-win}

[testenv]
platform =
    win: win32
    # prevent creating a non-working env on windows
    !win: (linux|darwin)
conda_channels=
    conda-forge
conda_install_args =
    # environment reproducibility: do not search default or .condarc channels
    --override-channels
conda_spec =
    requirements/gemseo-conda-python3.txt
conda_deps =
    # pdfo from pypi is a src distribution that is compiled at installation time,
    # we use the package from conda-forge such that we do not depend on compiling issues,
    # there is yet no package on conda-forge, so the dependency is declared here,
    # move it to requirements/gemseo-conda.txt once it has windows support
    !win: pdfo
deps =
    -r requirements/test-python3.txt
extras = all
setenv =
    # fix numpy issue on windows (due to numpy installed by conda for nlopt)
    # see https://github.com/tox-dev/tox-conda/issues/37
    # and https://github.com/tox-dev/tox-conda/issues/24
    win: CONDA_DLL_SEARCH_MODIFICATION_ENABLE = 1
    win: PATH = {envdir}{:}{envdir}\Library\mingw-w64\bin{:}{envdir}\Library\usr\bin{:}{envdir}\Library\bin{:}{envdir}\Scripts{:}{envdir}\bin{:}{env:PATH}
passenv =
    # workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory
    win: WINDIR
commands =
    pytest --cov-config setup.cfg {posargs}

[testenv:py27{,-win}]
conda_channels =
    # python 2.7 on windows from conda-forge is broken and no longer maintained
    win: defaults
    # get all the anaconda packages from conda-forge
    conda-forge
deps =
    -r requirements/test-python2.txt
conda_spec =
    requirements/gemseo-conda-python2.txt
conda_deps =
    # as compared to the handling of pdfo in the main testenv, there is no package for py27 on conda-forge
    # so we have to build it, we provide the compiler the most compatible with the other anaconda packages
    !win: gfortran_linux-64
    # we also have to build nlopt
    !win: gcc_linux-64
    !win: gxx_linux-64
    !win: make
setenv =
    {[testenv]setenv}
    # prevent matplotlib from requiring DISPLAY for python 2.7
    MPLBACKEND = AGG
    # required for building pdfo
    !win: NPY_DISTUTILS_APPEND_FLAGS = 1
# prevent warning because conda is not defined in the anaconda env created
whitelist_externals =
    !win: conda
# override the installation command such that pip is run from the anaconda env,
# this is required to build the pdfo package
install_command =
    !win: conda run -p {envdir} --no-capture-output pip install {opts} {packages} -vvv

[testenv:dev{,-win}]
description = env for development
basepython = python3.8
conda_deps =
    {[testenv]conda_deps}
    git
deps =
    {[testenv]deps}
    -r requirements/dev.txt
usedevelop = true
whitelist_externals =
    git
commands =
    pre-commit install -t commit-msg -t pre-commit
    git config pull.rebase true
    git config rerere.enabled true

[testenv:style{,-win}]
description = run style formatting and checking
basepython = {[testenv:dev]basepython}
# we do not need to inherit the conda_spec and conda_deps from the root env
conda_spec =
conda_deps =
deps = -r requirements/style.txt
skip_install = true
whitelist_externals =
    git
commands =
    pre-commit run --all-files

[testenv:pylint]
description = run pylint
basepython = {[testenv:dev]basepython}
# we do not need to inherit the conda_spec and conda_deps from the root env
conda_spec =
conda_deps =
deps = -r requirements/pylint.txt
skip_install = true
commands =
    pylint src tests setup.py

[testenv:doc{,-win}]
description = build documentation
basepython = {[testenv:dev]basepython}
conda_deps = {[testenv:dev]conda_deps}
deps =
    {[testenv]deps}
    -r requirements/doc.txt
usedevelop = true
changedir = doc_src/source
passenv =
    # required by matplotlib
    HOME
    # path to the directory that contains plantuml.jar
    PLANTUML_DIR
commands =
    # cross platform directory removal
    python -c "import shutil; shutil.rmtree('_modules', ignore_errors=True)"
    sphinx-build -j auto . {toxinidir}/doc {posargs:-b html}

[testenv:doc-spell{,-win}]
description = check doc spelling
envdir = {toxworkdir}/doc
basepython = {[testenv:doc]basepython}
usedevelop = {[testenv:doc]usedevelop}
deps = {[testenv:doc]deps}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling doc_src/source {toxinidir}/doc

[testenv:doc-linkchecker]
description = check links in the generated doc
basepython = python2.7
deps = linkchecker==9.4.0
skip_install = true
conda_deps =
commands =
    linkchecker {toxinidir}/doc

[testenv:create-dist]
description = create the pypi distribution
basepython = {[testenv:dev]basepython}
# see packaging info at https://pypi.org/help/#publishing
deps =
    twine ==3.4.1
    build ==0.3.1.post1
# we do not need to inherit the conda_spec and conda_deps from the root env
conda_spec =
conda_deps =
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:anaconda-package{,-win}]
description = test anaconda package
basepython = {[testenv:dev]basepython}
# we do not need to inherit the conda_spec from the root env
conda_spec =
conda_deps =
    conda-build
    conda-verify
deps = xonsh
skip_install = true
setenv =
    {[testenv]setenv}
    # prevent matplotlib from requiring DISPLAY for python 2.7,
    # not inherited from base testenv because it's only for the py27 env name factor
    MPLBACKEND = AGG
    # avoid permission issues by using user's local anaconda package cache
    CONDA_PKGS_DIRS = {env:HOME:{env:HOMEPATH:}}/.conda/pkgs
    ENVTMPDIR = {envtmpdir}
passenv =
    # required for windows
    win: ALLUSERSPROFILE
    win: PROGRAMFILES
commands =
    xonsh tools/test-anaconda-package.xsh

[testenv:anaconda-envs{,-win}]
description = test anaconda environment files
basepython = {[testenv:anaconda-package]basepython}
deps = {[testenv:anaconda-package]deps}
skip_install = {[testenv:anaconda-package]skip_install}
setenv = {[testenv:anaconda-package]setenv}
passenv = {[testenv:anaconda-package]passenv}
commands =
    xonsh tools/test-anaconda-envs.xsh

[testenv:full-package]
description = create an archive with the distribution, tests and docs
basepython = {[testenv:dev]basepython}
# we do not need to inherit the deps and conda_deps from the root env
deps =
conda_spec =
conda_deps = git
whitelist_externals = git
skip_install = true
commands =
    bash tools/create-full-package.sh

[testenv:py{36,37,38}-pypi{,-win}]
description = test the pypi distribution
deps =
    gemseo[all]
    pytest
# we do not install the local gemseo, the extras is defined in deps
extras =
skip_install = true
commands =
    # no need for coverage here
    pytest {posargs}

[testenv:py27-pypi{,-win}]
description = test the pypi distribution
conda_channels = {[testenv:py27]conda_channels}
conda_deps = {[testenv:py27]conda_deps}
setenv = {[testenv:py27]setenv}
whitelist_externals = {[testenv:py27]whitelist_externals}
# this cannot be inherited from the py27 env because under linux this produces an empty install command
install_command =
    !win: conda run -p {envdir} --no-capture-output pip install {opts} {packages} -vvv
deps = {[testenv:py38-pypi]deps}
extras = {[testenv:py38-pypi]extras}
skip_install = {[testenv:py38-pypi]skip_install}
commands = {[testenv:py38-pypi]commands}
