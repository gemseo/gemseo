[tox]
min_version = 4
requires = tox-uv

[testenv]
package = editable
deps = -r requirements/test-python{py_dot_ver}.txt
set_env =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-report=xml --cov-report=html --no-cov-on-fail
pass_env =
    # See gemseo developers docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:min-deps-versions]
description = test with the minimum versions of the dependencies
basepython = python3.9
deps = -r requirements/test-python{py_dot_ver}-min-deps-versions.txt

[testenv:check]
description = run code formatting and checking
deps = -r requirements/check.txt
skip_install = true
allowlist_externals = pre-commit
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:check-types]
description = run type checking
basepython = python3.12
deps =
    -r requirements/test-python3.12.txt
    -r requirements/check-types.txt
commands =
    mypy {posargs}

[testenv:doc]
description = build documentation
basepython = python3.12
deps =
    -r requirements/doc.txt
    # Do not install the dependencies that may have strong requirements (anaconda, java, ...).
    --no-deps -r requirements/doc-plugins.txt
extras = all,doc
pass_env =
    # Required by matplotlib.
    HOME
    # Path to the directory that contains plantuml.jar.
    PLANTUML_DIR
commands =
    # Cross platform directory removal.
    python -c "import shutil; shutil.rmtree('doc_src/modules', ignore_errors=True)"
    sphinx-apidoc -e -M -o {tox_root}/doc_src/modules {tox_root}/src/gemseo
    {[testenv:doc-fast]commands}

[testenv:doc-fast]
basepython = {[testenv:doc]basepython}
envdir = {work_dir}/doc
deps = {[testenv:doc]deps}
extras = {[testenv:doc]extras}
pass_env = {[testenv:doc]pass_env}
set_env =
    DOC_WITHOUT_PLUGINS = ""
    DOC_WITHOUT_GALLERY = ""
commands =
    sphinx-build -n -j auto -b html {tox_root}/doc_src {tox_root}/doc {posargs:}

[testenv:doc-spell-checker]
description = check doc spelling
extras = {[testenv:doc]extras}
envdir = {work_dir}/doc
set_env =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling doc_src {tox_root}/doc

[testenv:dist]
description = create and check the pypi distribution
deps =
    check-wheel-contents
    uv
skip_install = true
allowlist_externals = rm
commands =
    rm -rf dist build
    uv build
    # W002: ignore duplicated files.
    check-wheel-contents dist --ignore W002

[testenv:dist-upload]
description = upload existing distribution files to a package repository
skip_install = true
deps = uv
pass_env =
    UV_PUBLISH_TOKEN
    UV_PUBLISH_URL
commands =
    uv publish

[testenv:pypi-py{39,310,311,312}]
description = test the pypi distribution
deps =
    gemseo[all]
    pytest-xdist
skip_install = true

[testenv:update-deps]
description = update the envs dependencies
set_env =
pass_env =
deps =
    pre-commit
    uv
skip_install = true
commands =
    uv pip compile --upgrade --python-platform linux --group dev --extra all --python-version 3.9  pyproject.toml -o requirements/test-python3.9-min-deps-versions.txt --resolution=lowest-direct
    uv pip compile --upgrade --python-platform linux --group dev --extra all --python-version 3.9  pyproject.toml -o requirements/test-python3.9.txt
    uv pip compile --upgrade --python-platform linux --group dev --extra all --python-version 3.10 pyproject.toml -o requirements/test-python3.10.txt
    uv pip compile --upgrade --python-platform linux --group dev --extra all --python-version 3.11 pyproject.toml -o requirements/test-python3.11.txt
    uv pip compile --upgrade --python-platform linux --group dev --extra all --python-version 3.12 pyproject.toml -o requirements/test-python3.12.txt
    uv pip compile --upgrade --python-platform linux --group doc --extra all --python-version 3.12 pyproject.toml -o requirements/doc.txt
    pre-commit autoupdate
