[tox]
minversion = 3.20.0
# For using setuptools_scm.
isolated_build = true

[testenv]
deps =
    -r requirements/test.txt
    # Path to matlab package
    {env:MATLAB_PYTHON_WRAPPER:}
    # Path to pSeven package.
    {env:PSEVEN_PYTHON_WRAPPER:}
extras = all
setenv =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-config=setup.cfg --cov-report=xml
passenv =
    # License for pSeven.
    DATADVD_LICENSE_FILE
    # See dev docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
basepython = python3.9
deps = -r requirements/check.txt
skip_install = true
whitelist_externals =
    git
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:pylint]
description = run pylint
basepython = python3.9
deps = -r requirements/pylint.txt
skip_install = true
commands =
    pylint src tests setup.py

[testenv:doc]
description = build documentation
basepython = python3.9
deps =
    -r requirements/doc.txt
usedevelop = true
passenv =
    # Required by matplotlib.
    HOME
    # Path to the directory that contains plantuml.jar.
    PLANTUML_DIR
commands =
    # Cross platform directory removal.
    python -c "import shutil; shutil.rmtree('doc_src/source/_modules', ignore_errors=True)"
    sphinx-build -n -j auto -b html doc_src/source {toxinidir}/doc {posargs:}

[testenv:doc-spell-checker]
description = check doc spelling
basepython = python3.9
envdir = {toxworkdir}/doc
usedevelop = {[testenv:doc]usedevelop}
deps = {[testenv:doc]deps}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling doc_src/source {toxinidir}/doc

[testenv:doc-link-checker]
description = check links in the generated doc
basepython = python2.7
deps = linkchecker==9.4.0
skip_install = true
commands =
    linkchecker {toxinidir}/doc

[testenv:dist]
description = create and check the pypi distribution
basepython = python3.9
deps = -r requirements/dist.txt
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist build
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:py{37,38,39}-conda-forge]
description = test anaconda package from conda-forge
conda_deps = gemseo=={env:GEMSEO_VERSION:}
deps = pytest
skip_install = true
commands =
    pytest {posargs}

[testenv:anaconda-env-file]
description = test anaconda environment file
basepython = python3.9
deps = xonsh
skip_install = true
setenv =
    {[testenv]setenv}
    # Avoid permission issues by using user's local anaconda package cache.
    CONDA_PKGS_DIRS = {env:HOME:{env:HOMEPATH:}}/.conda/pkgs
    ENVTMPDIR = {envtmpdir}
passenv =
    # Required for windows.
    ALLUSERSPROFILE
    PROGRAMFILES
commands =
    xonsh tools/test-anaconda-env-file.xsh

[testenv:pypi]
description = test the pypi distribution
basepython = python3.9
deps = gemseo[all,test]
# We do not install the local gemseo, the extras is defined in deps.
extras =
skip_install = true

[testenv:update-deps-{test,doc,dist,check}]
description = update the envs dependencies with pip-compile
basepython = python3.9
extras =
setenv =
passenv =
deps =
    test: {[testenv]deps}
    doc: {[testenv:doc]deps}
    dist: {[testenv:dist]deps}
    check: {[testenv:check]deps}
    pip-tools
skip_install = true
commands =
    test: pip-compile -U requirements/test.in -o requirements/test.txt
    doc: pip-compile -U requirements/doc.in
    dist: pip-compile -U requirements/dist.in
    check: pip-compile -U requirements/check.in
    check: pre-commit autoupdate
