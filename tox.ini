[tox]
minversion = 3.20.0
# For using setuptools_scm.
isolated_build = true

[testenv]
deps =
    -r requirements/test-{basepython}.txt
extras = all,test
setenv =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-config=setup.cfg --cov-report=xml --cov-report=html
passenv =
    # See dev docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
deps = -r requirements/check.txt
skip_install = true
whitelist_externals =
    git
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:pylint]
description = run pylint
deps = -r requirements/pylint.txt
skip_install = true
commands =
    pylint src tests setup.py

[testenv:doc]
description = build documentation
basepython = python3.9
deps = -r requirements/doc.txt
extras = all,doc
passenv =
    # Required by matplotlib.
    HOME
    # Path to the directory that contains plantuml.jar.
    PLANTUML_DIR
commands_pre =
    pip install --no-deps -r requirements/doc-plugins.txt
commands =
    # Cross platform directory removal.
    python -c "import shutil; shutil.rmtree('doc_src/_modules', ignore_errors=True)"
    # The following shall also be done for readthedocs in .readthedocs.yaml
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_scilab
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_pymoo
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_java
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_petsc
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_mlearning
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_calibration
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_umdo
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_fmu
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_mma
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_pdfo
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_matlab
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_pseven
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {envsitepackagesdir}/gemseo_template_editor_gui
    sphinx-apidoc -e -M -o {toxinidir}/doc_src/_modules {toxinidir}/src/gemseo
    {[testenv:doc-fast]commands}

[testenv:doc-fast]
basepython = {[testenv:doc]basepython}
envdir = {toxworkdir}/doc
deps = {[testenv:doc]deps}
extras = {[testenv:doc]extras}
passenv = {[testenv:doc]passenv}
setenv =
    DOC_WITHOUT_PLUGINS = ""
    DOC_WITHOUT_GALLERY = ""
commands =
    sphinx-build -n -j auto -b html {toxinidir}/doc_src {toxinidir}/doc {posargs:}

[testenv:doc-spell-checker]
description = check doc spelling
extras = {[testenv:doc]extras}
envdir = {toxworkdir}/doc
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling doc_src {toxinidir}/doc

[testenv:dist]
description = create and check the pypi distribution
deps = -r requirements/dist.txt
skip_install = true
whitelist_externals =
    test
    rm
commands =
    # Make sure the repository is not dirty to avoid packaging unstaged files.
    {toxinidir}/tools/check-git-is-not-dirty
    rm -rf dist build
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:conda-forge-py{38,39,310}]
description = test anaconda package from conda-forge
conda_deps = gemseo=={env:GEMSEO_VERSION:}
conda_channels=
    conda-forge
conda_install_args=
    --override-channels
deps = pytest
skip_install = true
commands =
    pytest {posargs}

[testenv:pypi-py{38,39,310}]
description = test the pypi distribution
deps = gemseo[all,test]
passenv = PIP_EXTRA_INDEX_URL
skip_install = true

[testenv:update-deps-{doc,dist,check}]
description = update the non test envs dependencies
extras =
    doc: {[testenv:doc]extras}
setenv =
passenv =
deps =
    dist: {[testenv:dist]deps}
    check: {[testenv:check]deps}
    pip-tools
skip_install = true
commands =
    doc: pip-compile --resolver backtracking -U --extra all --extra doc -o requirements/doc.txt
    dist: pip-compile --resolver backtracking -U requirements/dist.in
    check: pip-compile --resolver backtracking -U requirements/check.in
    check: pre-commit autoupdate

[testenv:update-deps-test-py{38,39,310}]
description = update the test envs dependencies
extras = {[testenv]extras}
setenv =
passenv =
deps = pip-tools
skip_install = true
commands =
    pip-compile --resolver backtracking -U --extra all --extra test -o requirements/test-{basepython}.txt
