[tox]
# this version support empty factors we use for {,-win}
minversion = 3.20.0
requires = tox-conda >=0.7.3
envlist =
    py38{,-win}

[testenv]
platform =
    win: win32
    # prevent creating a non-working env on windows
    !win: (linux|darwin)
conda_channels=
    conda-forge
conda_install_args =
    # environment reproducibility: do not search default or .condarc channels
    --override-channels
conda_spec =
    requirements/gemseo-conda.txt
deps =
    -r requirements/test.txt
    # path to matlab package
    {env:MATLAB_PYTHON_WRAPPER:}
    # Path to pSeven package.
    {env:PSEVEN_PYTHON_WRAPPER:}
extras = all
setenv =
    # fix numpy issue on windows (due to numpy installed by conda for nlopt)
    # see https://github.com/tox-dev/tox-conda/issues/37
    # and https://github.com/tox-dev/tox-conda/issues/24
    win: CONDA_DLL_SEARCH_MODIFICATION_ENABLE = 1
    win: PATH = {envdir}{:}{envdir}\Library\mingw-w64\bin{:}{envdir}\Library\usr\bin{:}{envdir}\Library\bin{:}{envdir}\Scripts{:}{envdir}\bin{:}{env:PATH}
    # workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory
    win: WINDIR = {env:WINDIR:C:\Windows}
    # use a non GUI rendering backend for matplotlib
    MPLBACKEND = AGG
passenv =
    # license for pSeven
    DATADVD_LICENSE_FILE
    # See dev docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest --cov-config setup.cfg {posargs}

[testenv:dev{,-win}]
description = env for development
basepython = python3.8
deps =
    {[testenv]deps}
    -r requirements/dev.txt
usedevelop = true
whitelist_externals =
    git
commands =
    pre-commit install -t commit-msg -t pre-commit

[testenv:style{,-win}]
description = run style formatting and checking
basepython = {[testenv:dev]basepython}
# we do not need to inherit from the root env
conda_spec =
conda_deps =
deps = -r requirements/style.txt
skip_install = true
whitelist_externals =
    git
commands =
    pre-commit run --all-files

[testenv:pylint]
description = run pylint
basepython = {[testenv:dev]basepython}
# we do not need to inherit from the root env
conda_spec =
conda_deps =
deps = -r requirements/pylint.txt
skip_install = true
commands =
    pylint src tests setup.py

[testenv:doc{,-win}]
description = build documentation
basepython = {[testenv:dev]basepython}
deps =
    {[testenv]deps}
    -r requirements/doc.txt
usedevelop = true
passenv =
    # required by matplotlib
    HOME
    # path to the directory that contains plantuml.jar
    PLANTUML_DIR
commands =
    # cross platform directory removal
    python -c "import shutil; shutil.rmtree('doc_src/source/_modules', ignore_errors=True)"
    sphinx-build -n -j auto -b html doc_src/source {toxinidir}/doc {posargs:}

[testenv:doc-spell{,-win}]
description = check doc spelling
envdir = {toxworkdir}/doc
basepython = {[testenv:doc]basepython}
usedevelop = {[testenv:doc]usedevelop}
deps = {[testenv:doc]deps}
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling doc_src/source {toxinidir}/doc

[testenv:doc-linkchecker]
description = check links in the generated doc
basepython = python2.7
deps = linkchecker==9.4.0
skip_install = true
conda_deps =
conda_specs =
commands =
    linkchecker {toxinidir}/doc

[testenv:create-dist]
description = create the pypi distribution
basepython = {[testenv:dev]basepython}
# see packaging info at https://pypi.org/help/#publishing
deps =
    twine ==3.4.1
    build ==0.4.0
# we do not need to inherit from the root env
conda_spec =
conda_deps =
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist build
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:py{37,38,39}-conda-forge{,-win}]
description = test anaconda package from conda-forge
# we do not need to inherit from the root env
conda_spec =
conda_deps = gemseo=={env:GEMSEO_VERSION:}
deps = pytest
skip_install = true
commands =
    pytest {posargs}

[testenv:anaconda-env-file{,-win}]
description = test anaconda environment file
basepython = {[testenv:dev]basepython}
# we do not need to inherit from the root env
conda_spec =
deps = xonsh
skip_install = true
setenv =
    {[testenv]setenv}
    # avoid permission issues by using user's local anaconda package cache
    CONDA_PKGS_DIRS = {env:HOME:{env:HOMEPATH:}}/.conda/pkgs
    ENVTMPDIR = {envtmpdir}
passenv =
    # required for windows
    win: ALLUSERSPROFILE
    win: PROGRAMFILES
commands =
    xonsh tools/test-anaconda-env-file.xsh

[testenv:py{37,38,39}-pypi{,-win}]
description = test the pypi distribution
deps =
    gemseo[all,test]
# we do not install the local gemseo, the extras is defined in deps
extras =
skip_install = true
commands =
    # no need for coverage here
    pytest {posargs}
